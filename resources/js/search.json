[[{"i":"what-is-this","l":"What is this?","p":["VirtualBox WSL2 is a new way to have a WSL2-like environment, with some benefits (and some drawbacks, of course) that a normal WSL2 installation doesn't have.","Overall, it gives you more control over your VM resources, location, behavior, and allows you to use any distro, keeping it clean, and using GUI-based apps (X or Wayland) without much hassle. There's also automatic port forward towards localhost included with a small PowerShell v7 script.","The guide may seem lengthy, but it's just some basic steps:","Create a VM","Install a distro","Enable automatic SSH port forward","Edit a couple files and update your distro","Install the VirtualBox Guest Additions","Set up the automatic port forward script","And that's it! While it isn't as automatic as running wsl --install, it's more powerful and it can be done in a couple hours max.","One of the major benefits of this is that you don't need to upgrade to Windows 11 (although, highly recommended) or even an updated Windows 10 to achieve the same thing. As long as you can run VirtualBox and PowerShell, it'll work! Of course, you could replicate the PowerShell script with bash or something else, and that'll make the solution possible to be run in other operating systems as well. If you do so, I encourage you to submit your version to the GitHub repo hosting this guide, so we all can benefit from it \uD83D\uDE0A.","Ready? Let's get started!","If you prefer a video tutorial, there's one in the works. Stay tuned! \uD83D\uDE01"]}],[{"l":"Reasons","p":["And many more...","As you can see, there's no response about these issues since June 23, 2021 when the alt-drag/resize bug was reported. The lack of an official response or solution to these problems forced me to look for an alternative solution. I've spent about a week or so in this one, but it's been working way better than the official one so far, and I hope it does so for you too.","https://github.com/microsoft/wslg/issues/324(this is the most important one related to alt-drag/resize)","https://github.com/microsoft/wslg/issues/543","https://github.com/microsoft/wslg/issues/574","https://github.com/microsoft/wslg/issues/84","If you arrived here, thanks for reading! You can proceed with the rest of the guide \uD83D\uDE0A\uD83D\uDC4D\uD83C\uDFFB","Now, don't get me wrong. WSL2 and WSLg are a great idea and concept and I dare to say that it made Windows the best DE/WM for working with Linux, as it's still a mess on the desktop (as of 2022) for plenty of reasons so WSL2 is a godsend.","This is just an alternative I had to develop to overcome some of these issues mentioned above, and also have a bit more control on the Linux distros I'd like to run in my Windows host, emulating WSL2 behavior, and getting the alt-drag/resize enhancements and other ones mentioned in this guide.","This project idea (or rather, combination of projects and know-how) was born out of frustration due to some problems I found with the latest WSL2 environment:","To use WSL2 (and WSLg) you need Windows 11, or a retail Windows 10 (sorry, LTSC! Only WSL1 for you). While Windows 11 is by far the best OS to date in my opinion, it's a requirement that I know others can't comply. Plus, when you work with other company-provided devices, you might not be able to update the OS so you're stuck with an old version just because they say so (and not because it's the best idea...) therefore hampering your ability to work better at your job.","What if you need snapshots? What if you'd like to change your VM's resources using a GUI instead of editing a few files hidden in your local disk? Nope. And let's not talk about the fact that the VHDX file grows and grows and that you need to use a bunch of commands in diskpart just to compact the disk. With this solution, it's as easy as running CloneVDI, clicking a few things and that's it.","While you can edit the wsl.conf files in your host or in the distro, there's little control on how the distros and VMs work. It's as if you can only have a single Linux VM created \"per host, per distro\" and that's it. Plus, you can only edit the number of processors/cores, allocated RAM and nested virtualization with a flag, and even if so, the current kernel (as of date, April 2022) has problems with some CPU opcodes when running some VMs through QEMU. This forced me to look for a custom kernel that would work, but then again, hackish.","With WSL2 (or WSLg) you're forced to use Wayland-based apps. There's no support for X at all (maybe they're using XWayland, not sure) so if you want to force apps to use X instead, you need to install an X server on your host machine and edit a few files here and there to add some environment variables to disable Wayland altogether. Quite annoying if you ask me, it feels hackish.","With WSL2, you're forced to use the distros they support and suggest and only have available through the Windows Store, and that's the only installation method they support (AFAIK). Ubuntu Beta? Forget it. Clear Linux? Nope. Puppy Linux? What?. With this, you can be sure to run any distro you want, in their own clean form: No hacks, no workarounds, no quirks.","You can't alt-drag/resize windows if you use AltSnap or AltDrag(great apps by the way!) because it just craps out. Once you drag or resize, for some reason the RDP backend doesn't update the window size accordingly, so you end up with the window correctly resized (within Linux) but with the wrong size/coordinates in the visual representation of it. There's also problems with window rendering, positioning and sizing. See these bugs for details:"]}],[{"l":"Pros and cons","p":["Are you excited yet? Then head to the VM Setup page to get started!","Audio support (input & output) without quirks or hacks like PulseAudio / Pipewire or similar!","Automatic port forwarding just like WSL2! For instance, if you run Docker inside, and create a MySQL instance inside it, you can access it by just pointing your host's MySQL client to localhost:3306 and it'll work!","It's not as integrated with the host OS, meaning, you can't run $ explorer.exe ~/ and expect it to open an Explorer window in your \\\\wsl\\home\\user folder. This could be fixed with some scripting, but it goes out of the scope (for now).","Maybe losing a bit of hardware acceleration. VirtualBox's 3D implementation with the Guest Additions installed isn't as bad, I've run glxgears and it's synced to my refresh rate, meaning usually locked at 60 fps or so. It's been smooth so far though. I wouldn't recommend this solution for data scientists or people wanting to use CUDA with it (untested, no idea if it can be done with VirtualBox anyways) or even GPU passthrough, but for full stack development (Docker, GUI apps, etc.) it works perfectly fine.","No need to have Hyper-V or related features installed (meaning you can also have HAXM installed and running). This also means your machine can run bare metal without being virtualized (albeit in a ring-1 hypervisor) in Hyper-V, and thus also allowing nested virtualization correctly!","Snapshots! Did I mention we're using VirtualBox for this? Meaning, you can take a snapshot, try something, and if it doesn't work, restore the snapshot in seconds as if nothing happened?","Some important features/benefits are:","Some of its drawbacks are:","VirtualBox's seamless mode works best with just 1 monitor, in the case you need to run GUI apps. However, you can resize the window, move it to the other monitor and enable Seamless mode again. It seems that VirtualBox's multi-monitor handling/behavior isn't as good as VMWare Player's.","You can alt-drag/resize windows correctly, even when using AltSnap!","You can run X or Wayland based apps in seamless mode like WSL2, without the overhead or Wayland-only features that WSL2 has. This also removes the requirement to use an X server on Windows, of which there are plenty, and some work better than others. If you like, however, you also have that option. No need to use dirty hacks to remove Wayland from WSL2 just to make it work nicely with X.","You can store and run the VM from anywhere you want, be it an external disk, a NAS, etc. It all depends on VirtualBox's support. You also have more control over that, no need to dig into Windows Store's internal folders to find the VHDX file.","You can use any distro you want, so you're not locked to just Ubuntu LTS versions, Debian, Kali, OpenSUSE or Alpine. I repeat, any distro can be used!","You can use your own custom window decorations from the Linux Window Manager you're using, without being stuck to WSL2's Wayland GTK-based window decorations.","You have 100% control of the VM resources and behavior, thanks to VirtualBox (RAM, CPU, etc.). No need to edit the limited %USERPROFILE%\\wsl.conf file to apply system-wide configs, or edit the distro's /etc/wsl.conf file. It all feels more natural, just like any VM in your environment."]}],[{"l":"Virtual machine creation","p":["While any other VM software could be used, we're using VirtualBox because it allows us to do port forwarding through its NAT network, but for this to work automatically, we need VirtualBox's Guest Additions installed. It's also pretty fast, and easy to use. In theory, the same concept could work with QEMU, or VMWare, if you're brave enough."]},{"l":"Preparation","p":["If you need symlinks (i.e. running git, npm, yarn, etc. In a shared folder, or any app that creates or uses them) then you need to follow these instructions after installing VirtualBox, otherwise you're going to get permission errors when accessing or creating symlinks. And yes, this works with shared folders in NTFS drives.","If you don't think you'll need symlinks, you can skip this part.","You need to set these apps to run as administrator. They're usually located in C:\\Program Files\\Oracle\\VirtualBox","VirtualBoxVM.exe","VirtualBox.exe","VBoxSVC.exe","To do this, just follow these steps on each file:","Right click","Properties","Compatibility (tab)","Run this program as administrator","OK"]},{"l":"Creating the VM","p":["40 GB","8 GB","Any size is good, depending on your distro's requirements and your host OS resources.","Anything works. VDI is preferred as it allows for dynamic HDD types.","Could be different depending on the distro you want to use.","Description","Dynamic","HDD Format","HDD space allocation","Memory","Name","Once it's done, you can look for the .vbox file created by Virtual Box (usually in %USERPROFILE\\VirtualBox VMs) and move the .vdi and the .vbox files to another location if you so desire. Make sure to re-add the VDI in the VM's Storage section in case it throws errors. As of VirtualBox 6.1, I didn't have to do anything extra when doing this.","Open VirtualBox and attempt to create a new VM. When prompted, follow these instructions:","OS Type","Preferably, you would put here your total HDD space. It doesn't matter if you don't have it all free, that's just the maximum value it'll grow to. Just like WSL2, it'll use all the available space in your HDD.","The file size will grow with the VM's HDD contents, just like WSL2's VHDX.","Ubuntu (64-bit)","Value","VDI","VDI type","VM Name","WSL2","You can type anything, just make note of it, we'll be using it later."]},{"i":"configuring-the-vm-before-first-boot","l":"Configuring the VM (before first boot)","p":["1st CD/DVD, 2nd HDD. Disable all others.","Acceleration","Advanced","Audio","Basic","Boot","Boot order","CD/DVD","Click on Advanced and then set the paravirtualization adapter as virtio-net, for max speed.","Controllers","Depends on what you need","Description","Drag & Drop: Bidirectional","Emulation","Enable 3D Acceleration","Enable EFI","Enable Nested Paging","Enable Nested VT-x / AMD-v","Enable PAE/NX","Enabled","KVM","Max","Max cores","Max video memory","Motherboard","Name","Network","NIC 1","Paravirtualization","Screen","Set to the max recommended value for your CPU (use the green bar as guide)","Shared Clipboard","Storage","Tab","To do this, remove the default SATA controller, and add a new VirtIO-SCSI one. This way there's no I/O emulation for your HDD files. Once done, add your VDI file there. Also, mark as Solid State Drive (if possible).","USB","USB 3.0 xHCI","Value","virtio-net","VirtIO-SCSI","Yes","Yes/No","Your distro ISO file"]}],[{"l":"Ubuntu setup"},{"l":"Installation tips","p":["When prompted to update to the new installer, do so.","Ubuntu Server (minimized) works best, but once it's finished you need to install extra stuff not usually found in server distros, including basic ones such as bash-completion, nano, ping and similar. It's not a big deal though.","When prompted, disable LVM. It's rarely used anyways. Even more so for this use-case.","When prompted, enable OpenSSH server. This will make our life easier later."]},{"l":"Post-installation steps","p":["Once you've installed Ubuntu, there are some steps we need to follow to make our own WSL2 install work correctly. Such steps are outlined here.","We will be using WSL2 as the argument for controlvm. This is the name we set up when creating the VM in the \"VM Setup\" section. As for natpf1, this assumes we're altering the first NIC in the VM and that such NIC is the one attached to NAT. Same goes for the TCP22 rule to enable OpenSSH that we'll need to remove once we've set up automatic port forwarding."]},{"l":"Enable OpenSSH to login remotely","p":["Make sure to open the command prompt as administrator only if you set the VirtualBox apps to run as administrator as well.","Open a command prompt and run this to enable port forwarding from localhost:22 to the VM at port 22, so we can connect to it with ssh localhost:","In the same command prompt, run ssh user@localhost to connect to your VM (replace user with the username you set in the Ubuntu install step, of course)","If you get an error that says REMOTE HOST IDENTIFICATION HAS CHANGED!, you can delete the known_hosts file running this: del %USERPROFILE%\\.ssh\\known_hosts. It's annoying sometimes."]},{"l":"Add SSH key to enable automatic login","p":["Click Conversions menu","Click Export OpenSSH key. Save it as user.key or something. We'll need it later.","Click Generate","Click Save private key","Click Save public key","Copy","In the box below the text \" Public key for pasting into OpenSSH authorized_keys file\", there should be a bunch of text starting with ssh-rsa .... In that box, do this:","Now that you're there, run this to enable your current user to use the SSH key we generated. Of course, replace LONG_KEY_GOES_HERE with the value you got from the PuTTY Key Generator:","Paste and save this somewhere in a text file. You'll need it later.","Right-click","Run PuTTY Key Generator(puttygen.exe)","Save all your keys (usually a good idea. Setting a passphrase isn't recommended)","Select all","The reason we're not using passphrases and we're enabling automatic login is because this will make our life easier when we run the automatic port forwarding script and when we use VSCode or other tools. Just like WSL2 when you open a WSL2 terminal it and it \"automatically\" logs in to your user.","This step is required if you want the automatic port forward feature!","To enable automatic login, you need an SSH key. This can easily be done using Putty. Download and then install it, then follow these steps:"]},{"l":"Configure the new host in your SSH config","p":["This step is optional, but it's nice to have. If you don't have it already, create a file as %USERPROFILE%\\.ssh\\config and add the following contents:","Of course, replace user with your username and C:\\Users\\User\\.ssh\\keys\\user.key with the full path of the user.key file we saved in PuTTY Key Generator, step 5.","You can easily log in from any terminal just by typing: ssh wsl2."]},{"l":"Set up apt-get and update your distro","p":["In this last step, you'll configure apt-get to be a little bit faster, and get your distro up-to-date. This will make our life easier later:"]},{"l":"Disable IPv6","p":["For some reason, Ubuntu 21.10 is a little bit slow waiting for network to be configured even if we already have IPv4 configured. We can speed up this process by editing /etc/default/grub and changing the following lines with this content:","Then run sudo update-grub and reboot the VM."]},{"l":"Install VirtualBox Guest Additions","p":["In the VirtualBox window, click Devices -> Install Guest Additions CD Image..., then do this:","Then reboot the VM."]}],[{"l":"Ubuntu extras"},{"l":"Shared folders","p":["Say you want to use a shared folder in your host (or a drive, whatever works) the same way WSL2 works with your host drive. This can be achieved the same way by following these steps:","First, add your user to the vboxsf group:","Reboot the VM.","Now create a shared folder and take note of the Folder Name value. We are going to need this to run this script to enable symlinks in the shared folder:","Note that WSL2 is the name of the VirtualBox VM we created, and Z_DRIVE is the Folder Name of the shared folder we set up. Sadly, this has to be done per VM per shared folder. The way WSL2 would do it, is to set all your drives up as shared folders and mount them in /mnt/z(following this example of a Z:\\ drive as shared folder)."]},{"l":"Launch GUI apps","p":["To have an X environment that just works™, I recommend to install sddm as the login manager as it allows for autologin, so once you fire up the VM it'll boot right into X ready for work. You also need a DE/WM. I recommend Openbox because I'm used to it, it's lightweight and for development you don't really need a full-fledged desktop if you're just testing apps or just running a few. You could also run a full DE/WM this way, no need to juggle or mess with X servers and their slowness - VirtualBox does it all for you!","To follow the recommended method, just run this:","Then edit /etc/sddm.conf and add your username:","And that's it! Once your VM boots, it'll boot straight to X. The screen will be black, but your mouse cursor will show. Right-click anywhere to open a menu (that's how Openbox works) and launch apps from there."]},{"l":"Debug GUI apps","p":["If you want to use VSCode or other environments to debug apps right inside the VM( Without using X11 forwarding- which is what you can mostly find out on the net), just edit /etc/bash.bashrc and add the following line at the end:","Now you can reboot, and when you open VSCode and connect to the VM and launch a GUI app (say, your app launches Google Chrome, or runs xdotool or something), it'll run inside the VM, YAY!","If you want your apps to connect to a local X server (say, VcXsrv) just configure it to accept connections from any host and change the DISPLAY variable above with the host's NAT IP. In VirtualBox, it's usually 10.0.2.2, so it would be: DISPLAY=10.0.2.2:0. Another option would be to skip editing /etc/bash.bashrc altogether and use classic X11 forwarding instead through VSCode's Remote-SSH extension."]},{"i":"final-steps--clean-up","l":"Final steps / Clean up","p":["Run this to install some basic, useful utilities and clean up cache and free up some space:","Once done, shut down the VM and then use CloneVDI to clone the existing VDI, keeping the same UUID and compact while cloning. This will save up some space and you can end up with a 3.5 - 3.7 GB file once finished.","You're done!"]}],[{"l":"VirtualBox automatic port forward","p":["The reason why this is in its own section it's because it's generic enough to be followed for any distro, as the changes are minimal.","Make sure you have installed the VirtualBox Guest Additions, that's a requirement. Same goes for PowerShell v7.","These methods require, and have only been tested on, Ubuntu 21.10+. If you use another distro, you'd have to look up how to follow the same steps there. It's basically running netstat and having the ability to restart the VirtualBox Guest Additions service ( vboxadd and vboxadd-service) every minute or so, because it seems to crash after a while and it doesn't let run netstat anymore claiming the user can't log on, but that's not true.","First, make sure your user has permissions to run /usr/bin/netstat and /usr/bin/service(if on a systemd-based distro) as root. Otherwise, you'll need to use sudo and visudo and make some changes in the /etc/sudoers file, of course, replacing user with your Linux username:","Create a PowerShell script somewhere in your computer. I've named it C:\\_scripts\\VBoxWSLSVC.ps1. Leave it empty for now. First, let's make a shortcut for it:","Use your Windows Start Menu to look out for the PowerShell shortcut. Copy it on your desktop or something, or create a new shortcut by looking for pwsh.exe. It could be found at C:\\Program Files\\PowerShell\\7. Right-click it and choose \"Create shortcut\". If it asks to create it on the desktop, click yes.","Right-click the shortcut","Click Properties.","Change Target to look like this:","Click on Compatibility tab","Enable \"Run this program as administrator\"","Click OK","Now, put this as the content for your PowerShell script and edit the first lines accordingly. When you fire up your VM, you run the new PowerShell shortcut you just created (so this script runs as administrator) and it'll be watching the VM for new ports opened every 5 seconds, and apply the corresponding NAT port forwarding rules. Automagically!","Before running this script, make sure to manually delete all port forwarding rules set in your VM's NAT interface (we set one in the Setup step, remember?), otherwise it'll throw some errors.","This script is in constant development, but it works well for now."]}],[{"l":"Extras"},{"i":"browse-the-linux-filesystem-just-like-wsl","l":"Browse the Linux filesystem just like \\\\wsl\\","p":["There's a way to browse the Linux filesystem with Windows Explorer just like WSL2 does, and it's by installing and running a couple apps. You need:","WinFSP","SSHFS-Win","SSHFS-Win-Manager","Basically you install all 3 apps, then use the SSHFS-Win-Manager to connect to your distro. Remember to use localhost as your hostname, and use either user/password or user/keyfile combination to create the drive. Pick one (or leave it on Auto) and once you connect, it'll create a drive that looks like a network drive, but it's attached to your Linux filesystem and you can use it just like that, automagically!","This does not only work with your local VirtualBox-based WSL2 install, but also with any remote server over SSH. A handy tool!"]},{"l":"Ubuntu-related developer extras"},{"l":"Add swap","p":["This is in case you don't have much RAM, but you have HDD space to spare:"]},{"i":"installupgrade-docker-and-docker-compose","l":"Install/upgrade Docker and Docker Compose"},{"l":"Install Google Chrome"},{"l":"Install .NET Core SDK"},{"i":"install-nodejs","l":"Install Node.js","p":["The multiple sudo npm i -g npm is because npm needs to be upgraded upon installing, and sometimes when you upgrade it, it says theres yet another version to upgrade to. This should make it work better so you always have the latest version."]}],[{"l":"Conclusion","p":["This has been the result of at least a week long of sleepless nights of research, experimentation, lots of VM and host reinstalls and gathering all the info and writing this documentation all nicely for you to follow and have a nice environment to develop, work on, or just experiment with other distros or operating systems.","I'm sure there are things that can be made better, some processes could be automated, ultimately into a single command to run (just like wsl --install) but right now, it's good enough. In case you're interested, I've given here all the info you require to automate all this process, if you feel like it, or maybe just wait until I end up automating it... After all, I love to automate all the things!","For now, I hope this guide has been useful for you and, hopefully, if this guide ever reaches someone working at MS in the WSL project, to take this as friendly feedback about pain points that users of your product go through and the solutions we've found to them, that, hopefully, may also be useful for you to help make it all better.","If this has made your life better and you'd like to share me beer, I'd greatly appreciate it. You can do so through here:","So long, and thanks for all the fish!"]}]]